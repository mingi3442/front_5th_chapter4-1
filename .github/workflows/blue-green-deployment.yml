# .github/workflows/blue-green-deployment.yml (완전 자립형)
name: Blue-Green Deployment (Self-Contained)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js project
        run: npm run build

      - name: Setup AWS CLI and credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # AWS CLI는 GitHub 러너에 기본 설치되어 있음
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" 
          aws configure set default.region "$AWS_DEFAULT_REGION"

          # 연결 테스트
          aws sts get-caller-identity

      - name: Install jq for JSON parsing
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Determine target environment (Blue/Green)
        id: target
        run: |
          # prod 환경의 현재 Origin 확인
          CURRENT_ORIGIN=$(aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --query 'Distribution.DistributionConfig.Origins.Items[0].DomainName' --output text)
          echo "Current origin: $CURRENT_ORIGIN"

          # blue/green 판단
          if [[ $CURRENT_ORIGIN == *"blue"* ]]; then
            TARGET="green"
            echo "🔵 Current: BLUE → 🎯 Target: GREEN"
          else
            TARGET="blue"
            echo "🟢 Current: GREEN → 🎯 Target: BLUE"
          fi

          echo "target_color=$TARGET" >> $GITHUB_OUTPUT
          echo "target_bucket=hanghae-prod-$TARGET" >> $GITHUB_OUTPUT

      - name: Deploy to target S3 bucket
        run: |
          echo "📤 Deploying to: ${{ steps.target.outputs.target_bucket }}"
          aws s3 sync out/ s3://${{ steps.target.outputs.target_bucket }} --delete

      - name: Health check
        run: |
          HEALTH_URL="https://${{ steps.target.outputs.target_bucket }}.s3.amazonaws.com/index.html"
          echo "🏥 Health checking: $HEALTH_URL"

          if curl -f --max-time 30 "$HEALTH_URL"; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

      - name: Switch CloudFront origin
        run: |
          echo "🔄 Switching to ${{ steps.target.outputs.target_color }}"

          # 현재 설정 가져오기
          aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} > dist.json
          ETAG=$(jq -r '.ETag' dist.json)

          # Origin 변경
          NEW_DOMAIN="${{ steps.target.outputs.target_bucket }}.s3.amazonaws.com"
          jq --arg domain "$NEW_DOMAIN" '.Distribution.DistributionConfig.Origins.Items[0].DomainName = $domain' dist.json | jq '.Distribution.DistributionConfig' > new-config.json

          # 업데이트
          aws cloudfront update-distribution \
            --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
            --distribution-config file://new-config.json \
            --if-match $ETAG

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Deployment summary
        run: |
          echo "🎉 Blue-Green deployment completed!"
          echo "Target: ${{ steps.target.outputs.target_color }}"
          echo "Bucket: ${{ steps.target.outputs.target_bucket }}"
          echo "🌐 Live URL: https://prod.min73.dev"
