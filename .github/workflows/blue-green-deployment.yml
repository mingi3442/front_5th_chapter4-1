name: Blue-Green Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Code quality check (Lint)
        run: |
          echo "🔍 Running code quality check..."

          # 린팅 실행 (스크립트가 있는 경우만)
          if [ -f "package.json" ] && npm run | grep -q "lint"; then
            echo "Running ESLint..."
            npm run lint
            echo "✅ Linting passed"
          else
            echo "ℹ️ No lint script found, skipping linting..."
          fi

      - name: Build Next.js project
        run: npm run build

      - name: Setup AWS CLI and credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" 
          aws configure set default.region "$AWS_DEFAULT_REGION"

          # 연결 테스트
          aws sts get-caller-identity

      - name: Install required tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq bc
          # Lighthouse CLI 설치
          npm install -g @lhci/cli lighthouse

      - name: Determine target environment (Blue/Green)
        id: target
        run: |
          # prod 환경의 현재 Origin 확인
          CURRENT_ORIGIN=$(aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --query 'Distribution.DistributionConfig.Origins.Items[0].DomainName' --output text)
          echo "Current origin: $CURRENT_ORIGIN"

          # blue/green 판단
          if [[ $CURRENT_ORIGIN == *"blue"* ]]; then
            TARGET="green"
            CURRENT="blue"
            echo "🔵 Current: BLUE → 🎯 Target: GREEN"
          else
            TARGET="blue"
            CURRENT="green" 
            echo "🟢 Current: GREEN → 🎯 Target: BLUE"
          fi

          echo "target_color=$TARGET" >> $GITHUB_OUTPUT
          echo "target_bucket=hanghae-prod-$TARGET" >> $GITHUB_OUTPUT
          echo "current_color=$CURRENT" >> $GITHUB_OUTPUT
          echo "current_bucket=hanghae-prod-$CURRENT" >> $GITHUB_OUTPUT

      - name: Debug current CloudFront configuration
        run: |
          echo "🔍 Debugging CloudFront configuration..."

          # 현재 CloudFront Origin 설정 확인
          echo "=== Current CloudFront Origin ==="
          aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
            --query 'Distribution.DistributionConfig.Origins.Items[0]' \
            --output table

          # CloudFront 상태 확인
          echo "=== CloudFront Status ==="
          aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
            --query 'Distribution.Status' --output text

          # 대상 S3 버킷 직접 접근 테스트
          echo "=== Testing S3 direct access ==="
          TARGET_BUCKET="${{ steps.target.outputs.target_bucket }}"
          S3_URL="https://$TARGET_BUCKET.s3.amazonaws.com/index.html" 

          echo "Testing: $S3_URL"
          curl -I "$S3_URL" || echo "S3 direct access failed"

          # S3 버킷 정책 확인
          echo "=== S3 Bucket Policy ==="
          aws s3api get-bucket-policy --bucket $TARGET_BUCKET --query 'Policy' --output text || echo "No bucket policy found"

      - name: Deploy to target S3 bucket
        run: |
          echo "📤 Deploying to: ${{ steps.target.outputs.target_bucket }}"

          # S3 웹사이트 호스팅 활성화 (CloudFront 호환성을 위해)
          echo "🌐 Enabling S3 website hosting..."
          aws s3 website s3://${{ steps.target.outputs.target_bucket }} \
            --index-document index.html \
            --error-document index.html

          # S3 파일 업로드
          aws s3 sync out/ s3://${{ steps.target.outputs.target_bucket }} --delete

          echo "✅ Deployment completed"

      - name: Switch CloudFront origin
        id: switch
        run: |
          echo "🔄 Switching to ${{ steps.target.outputs.target_color }}"

          # 현재 설정 가져오기 (롤백용 백업)
          aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} > dist.json
          ETAG=$(jq -r '.ETag' dist.json)

          # 롤백을 위해 현재 설정 저장
          echo "etag=$ETAG" >> $GITHUB_OUTPUT

          # 현재 Origin ID 확인
          CURRENT_ORIGIN_ID=$(jq -r '.Distribution.DistributionConfig.Origins.Items[0].Id' dist.json)
          echo "Current Origin ID: $CURRENT_ORIGIN_ID"

          # Origin 변경 (S3 웹사이트 엔드포인트 사용 - 올바른 형식)
          NEW_DOMAIN="${{ steps.target.outputs.target_bucket }}.s3-website.${{ secrets.AWS_REGION }}.amazonaws.com"
          NEW_ORIGIN_ID="${{ steps.target.outputs.target_bucket }}"
          echo "New domain will be: $NEW_DOMAIN"
          echo "New Origin ID will be: $NEW_ORIGIN_ID"

          # Origin 정보와 Cache Behavior 모두 업데이트
          jq --arg domain "$NEW_DOMAIN" --arg new_id "$NEW_ORIGIN_ID" --arg old_id "$CURRENT_ORIGIN_ID" \
            '.Distribution.DistributionConfig.Origins.Items[0].DomainName = $domain | 
             .Distribution.DistributionConfig.Origins.Items[0].Id = $new_id |
             .Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId = $new_id |
             (.Distribution.DistributionConfig.CacheBehaviors.Items[]? | select(.TargetOriginId == $old_id) | .TargetOriginId) = $new_id' \
            dist.json | jq '.Distribution.DistributionConfig' > new-config.json

          # 설정 확인 출력
          echo "=== New Origin Configuration ==="
          jq '.Origins.Items[0] | {Id, DomainName}' new-config.json

          echo "=== Cache Behavior Target Origins ==="
          jq '.DefaultCacheBehavior.TargetOriginId' new-config.json
          jq '.CacheBehaviors.Items[]?.TargetOriginId // empty' new-config.json

          # 업데이트
          aws cloudfront update-distribution \
            --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
            --distribution-config file://new-config.json \
            --if-match $ETAG

          echo "✅ CloudFront origin and cache behaviors switched to: $NEW_DOMAIN"

      - name: Wait for CloudFront deployment
        run: |
          echo "⏳ Waiting for CloudFront deployment..."

          # CloudFront 배포 완료까지 대기 (최대 10분)
          for i in {1..20}; do
            STATUS=$(aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --query 'Distribution.Status' --output text)
            echo "Deployment status ($i/20): $STATUS"
            
            if [[ "$STATUS" == "Deployed" ]]; then
              echo "✅ CloudFront deployment completed"
              break
            fi
            
            if [[ $i -eq 20 ]]; then
              echo "❌ CloudFront deployment timed out"
              exit 1
            fi
            
            sleep 30
          done

          # 추가 전파 대기 (1분으로 단축)
          echo "⏳ Brief wait for initial propagation..."
          sleep 60

      - name: Invalidate CloudFront cache
        run: |
          echo "🔄 Invalidating CloudFront cache..."

          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "Invalidation ID: $INVALIDATION_ID"
          echo "✅ Cache invalidation initiated"

      - name: Final check
        run: |
          echo "🎯 Deployment completed!"
          echo "🌐 Live URL: https://prod.min71.dev"
          echo "ℹ️ Please manually verify the site is working"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "🚨 Deployment failed! Initiating rollback..."

          if [[ -f "dist.json" ]] && [[ -n "${{ steps.switch.outputs.etag }}" ]]; then
            echo "🔄 Rolling back CloudFront to previous configuration..."
            
            # 원래 설정으로 롤백
            jq '.Distribution.DistributionConfig' dist.json > rollback-config.json
            
            # 새로운 ETag 가져오기
            CURRENT_ETAG=$(aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --query 'ETag' --output text)
            
            aws cloudfront update-distribution \
              --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
              --distribution-config file://rollback-config.json \
              --if-match $CURRENT_ETAG
            
            # 롤백 후 캐시 무효화
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
              --paths "/*"
            
            echo "✅ Rollback completed - reverted to ${{ steps.target.outputs.current_color }}"
            echo "⏳ Please wait 5-10 minutes for rollback to fully propagate"
          else
            echo "⚠️ Rollback configuration not available"
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "📊 DEPLOYMENT SUMMARY"
          echo "===================="

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "🎉 Blue-Green deployment completed successfully!"
            echo "✅ Target: ${{ steps.target.outputs.target_color }}"
            echo "✅ Bucket: ${{ steps.target.outputs.target_bucket }}"
            echo "🌐 Live URL: https://prod.min71.dev"
          else
            echo "❌ Deployment failed!"
            echo "🔄 Rollback to ${{ steps.target.outputs.current_color }} initiated"
          fi

          echo "📅 Deployment Time: $(date)"
          echo "🏷️ Status: ${{ job.status }}"
