name: Blue-Green Deployment with Enhanced Testing

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Code quality check (Lint)
        run: |
          echo "🔍 Running code quality check..."

          # 린팅 실행 (스크립트가 있는 경우만)
          if [ -f "package.json" ] && npm run | grep -q "lint"; then
            echo "Running ESLint..."
            npm run lint
            echo "✅ Linting passed"
          else
            echo "ℹ️ No lint script found, skipping linting..."
          fi

      - name: Build Next.js project
        run: npm run build

      - name: Setup AWS CLI and credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # AWS CLI는 GitHub 러너에 기본 설치되어 있음
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" 
          aws configure set default.region "$AWS_DEFAULT_REGION"

          # 연결 테스트
          aws sts get-caller-identity

      - name: Install required tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq bc
          # Lighthouse CLI 설치
          npm install -g @lhci/cli lighthouse

      - name: Determine target environment (Blue/Green)
        id: target
        run: |
          # prod 환경의 현재 Origin 확인
          CURRENT_ORIGIN=$(aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --query 'Distribution.DistributionConfig.Origins.Items[0].DomainName' --output text)
          echo "Current origin: $CURRENT_ORIGIN"

          # blue/green 판단
          if [[ $CURRENT_ORIGIN == *"blue"* ]]; then
            TARGET="green"
            CURRENT="blue"
            echo "🔵 Current: BLUE → 🎯 Target: GREEN"
          else
            TARGET="blue"
            CURRENT="green" 
            echo "🟢 Current: GREEN → 🎯 Target: BLUE"
          fi

          echo "target_color=$TARGET" >> $GITHUB_OUTPUT
          echo "target_bucket=hanghae-prod-$TARGET" >> $GITHUB_OUTPUT
          echo "current_color=$CURRENT" >> $GITHUB_OUTPUT
          echo "current_bucket=hanghae-prod-$CURRENT" >> $GITHUB_OUTPUT

      - name: Deploy to target S3 bucket
        run: |
          echo "📤 Deploying to: ${{ steps.target.outputs.target_bucket }}"

          # S3 버킷에 퍼블릭 읽기 권한 설정 (CloudFront 접근용)
          echo "🔒 Setting bucket policy for CloudFront access..."
          cat > bucket-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "PublicReadGetObject",
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::${{ steps.target.outputs.target_bucket }}/*"
              }
            ]
          }
          EOF

          aws s3api put-bucket-policy \
            --bucket ${{ steps.target.outputs.target_bucket }} \
            --policy file://bucket-policy.json

          # S3 파일 업로드
          aws s3 sync out/ s3://${{ steps.target.outputs.target_bucket }} --delete

          echo "✅ Deployment completed with public read access"

      - name: Health check
        run: |
          HEALTH_URL="https://${{ steps.target.outputs.target_bucket }}.s3.amazonaws.com/index.html"
          echo "🏥 Health checking: $HEALTH_URL"

          if curl -f --max-time 30 "$HEALTH_URL"; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

      - name: Switch CloudFront origin
        id: switch
        run: |
          echo "🔄 Switching to ${{ steps.target.outputs.target_color }}"

          # 현재 설정 가져오기 (롤백용 백업)
          aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} > dist.json
          ETAG=$(jq -r '.ETag' dist.json)

          # 롤백을 위해 현재 설정 저장
          echo "etag=$ETAG" >> $GITHUB_OUTPUT

          # Origin 변경
          NEW_DOMAIN="${{ steps.target.outputs.target_bucket }}.s3.amazonaws.com"
          jq --arg domain "$NEW_DOMAIN" '.Distribution.DistributionConfig.Origins.Items[0].DomainName = $domain' dist.json | jq '.Distribution.DistributionConfig' > new-config.json

          # 업데이트
          aws cloudfront update-distribution \
            --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
            --distribution-config file://new-config.json \
            --if-match $ETAG

          echo "✅ CloudFront origin switched to: $NEW_DOMAIN"

      - name: Wait for CloudFront deployment
        run: |
          echo "⏳ Waiting for CloudFront deployment..."

          # CloudFront 배포 완료까지 대기 (최대 10분)
          for i in {1..20}; do
            STATUS=$(aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --query 'Distribution.Status' --output text)
            echo "Deployment status ($i/20): $STATUS"
            
            if [[ "$STATUS" == "Deployed" ]]; then
              echo "✅ CloudFront deployment completed"
              break
            fi
            
            if [[ $i -eq 20 ]]; then
              echo "❌ CloudFront deployment timed out"
              exit 1
            fi
            
            sleep 30
          done

          # 추가 대기 시간 (전파 완료를 위해)
          echo "⏳ Additional wait for propagation..."
          sleep 120

      - name: Invalidate CloudFront cache
        run: |
          echo "🔄 Invalidating CloudFront cache..."

          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "Invalidation ID: $INVALIDATION_ID"
          echo "⏳ Waiting for cache invalidation to complete..."

          # 캐시 무효화 완료 대기
          for i in {1..10}; do
            STATUS=$(aws cloudfront get-invalidation \
              --distribution-id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
              --id $INVALIDATION_ID \
              --query 'Invalidation.Status' \
              --output text)
            
            echo "Invalidation status ($i/10): $STATUS"
            
            if [[ "$STATUS" == "Completed" ]]; then
              echo "✅ Cache invalidation completed"
              break
            fi
            
            sleep 30
          done

      - name: Production health check
        run: |
          echo "🏥 Running production health checks..."
          PROD_URL="https://prod.min71.dev"

          # 프로덕션 URL 연결 확인
          for i in {1..5}; do
            if curl -f --max-time 30 "$PROD_URL/" > /dev/null; then
              echo "✅ Production health check passed (attempt $i)"
              break
            else
              echo "⏳ Production health check failed, retrying... (attempt $i/5)"
              if [[ $i -eq 5 ]]; then
                echo "❌ Production health check failed"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: HTML rendering validation
        run: |
          echo "🔍 Validating HTML rendering..."
          PROD_URL="https://prod.min71.dev"

          # HTML 응답 가져오기
          RESPONSE=$(curl -s "$PROD_URL/")

          # 기본 HTML 구조 확인
          if [[ ! $RESPONSE == *"<html"* ]] || [[ ! $RESPONSE == *"</html>"* ]]; then
            echo "❌ Invalid HTML structure"
            exit 1
          fi

          # 필수 요소 확인
          if [[ ! $RESPONSE == *"<title>"* ]]; then
            echo "❌ Missing title tag"
            exit 1
          fi

          if [[ ! $RESPONSE == *"<head>"* ]] || [[ ! $RESPONSE == *"</head>"* ]]; then
            echo "❌ Missing head section"
            exit 1
          fi

          # Next.js 관련 요소 확인
          if [[ $RESPONSE == *"_next"* ]]; then
            echo "✅ Next.js assets detected"
          fi

          # 페이지 크기 확인
          PAGE_SIZE=$(echo -n "$RESPONSE" | wc -c)
          echo "Page size: $PAGE_SIZE bytes"

          if [ $PAGE_SIZE -lt 100 ]; then
            echo "❌ Page too small, possible error page"
            exit 1
          fi

          echo "✅ HTML rendering validation passed"

      - name: Lighthouse performance audit
        run: |
          echo "🔍 Running Lighthouse performance audit..."
          PROD_URL="https://prod.min71.dev"

          # Lighthouse 실행
          lighthouse "$PROD_URL" \
            --output=json \
            --output-path=./lighthouse-report.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --quiet \
            --max-wait-for-load=30000

          # 성능 점수 확인
          PERFORMANCE_SCORE=$(jq -r '.categories.performance.score * 100' lighthouse-report.json)
          ACCESSIBILITY_SCORE=$(jq -r '.categories.accessibility.score * 100' lighthouse-report.json)
          BEST_PRACTICES_SCORE=$(jq -r '.categories["best-practices"].score * 100' lighthouse-report.json)
          SEO_SCORE=$(jq -r '.categories.seo.score * 100' lighthouse-report.json)

          echo "📊 Lighthouse Scores:"
          echo "  Performance: $PERFORMANCE_SCORE"
          echo "  Accessibility: $ACCESSIBILITY_SCORE"  
          echo "  Best Practices: $BEST_PRACTICES_SCORE"
          echo "  SEO: $SEO_SCORE"

          # 최소 성능 점수 확인 (60점 이상)
          if (( $(echo "$PERFORMANCE_SCORE < 60" | bc -l) )); then
            echo "⚠️ Performance score below threshold: $PERFORMANCE_SCORE (minimum: 60)"
            echo "🔄 Deployment will continue but performance needs attention"
          else
            echo "✅ Performance score acceptable: $PERFORMANCE_SCORE"
          fi

          # 접근성 점수 확인 (80점 이상)
          if (( $(echo "$ACCESSIBILITY_SCORE < 80" | bc -l) )); then
            echo "⚠️ Accessibility score below recommended: $ACCESSIBILITY_SCORE"
          else
            echo "✅ Accessibility score good: $ACCESSIBILITY_SCORE"
          fi

      - name: Final stability test
        run: |
          echo "🔍 Running final stability test..."
          PROD_URL="https://prod.min71.dev"

          # 1분간 안정성 테스트
          for i in {1..4}; do
            if ! curl -f --max-time 15 "$PROD_URL/" > /dev/null; then
              echo "❌ Stability test failed at check $i"
              exit 1
            fi
            echo "✅ Stability check $i/4 passed"
            sleep 15
          done

          echo "✅ Final stability test completed"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "🚨 Deployment failed! Initiating rollback..."

          if [[ -f "dist.json" ]] && [[ -n "${{ steps.switch.outputs.etag }}" ]]; then
            echo "🔄 Rolling back CloudFront to previous configuration..."
            
            # 원래 설정으로 롤백
            jq '.Distribution.DistributionConfig' dist.json > rollback-config.json
            
            # 새로운 ETag 가져오기
            CURRENT_ETAG=$(aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --query 'ETag' --output text)
            
            aws cloudfront update-distribution \
              --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
              --distribution-config file://rollback-config.json \
              --if-match $CURRENT_ETAG
            
            # 롤백 후 캐시 무효화
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
              --paths "/*"
            
            echo "✅ Rollback completed - reverted to ${{ steps.target.outputs.current_color }}"
            echo "⏳ Please wait 5-10 minutes for rollback to fully propagate"
          else
            echo "⚠️ Rollback configuration not available"
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "📊 DEPLOYMENT SUMMARY"
          echo "===================="

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "🎉 Blue-Green deployment completed successfully!"
            echo "✅ Target: ${{ steps.target.outputs.target_color }}"
            echo "✅ Bucket: ${{ steps.target.outputs.target_bucket }}"
            echo "✅ All health checks passed"
            echo "✅ HTML rendering validated"
            echo "✅ Lighthouse audit completed"
            echo "🌐 Live URL: https://prod.min71.dev"
          else
            echo "❌ Deployment failed!"
            echo "🔄 Rollback to ${{ steps.target.outputs.current_color }} initiated"
            echo "📋 Please check the logs above for failure details"
          fi

          echo "📅 Deployment Time: $(date)"
          echo "🏷️ Status: ${{ job.status }}"
