name: Blue-Green Deployment (Simplified)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm ci

      - name: Code quality check (Lint)
        run: |
          echo "🔍 Running code quality check..."

          # 린팅 실행 (스크립트가 있는 경우만)
          if [ -f "package.json" ] && npm run | grep -q "lint"; then
            echo "Running ESLint..."
            npm run lint
            echo "✅ Linting passed"
          else
            echo "ℹ️ No lint script found, skipping linting..."
          fi

      - name: Build Next.js project
        run: npm run build

      - name: Setup AWS CLI and credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY" 
          aws configure set default.region "$AWS_DEFAULT_REGION"

          # 연결 테스트
          aws sts get-caller-identity

      - name: Install required tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq bc
          # Lighthouse CLI 설치
          npm install -g @lhci/cli lighthouse

      - name: Determine target environment (Blue/Green)
        id: target
        run: |
          # prod 환경의 현재 Origin 확인
          CURRENT_ORIGIN=$(aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --query 'Distribution.DistributionConfig.Origins.Items[0].DomainName' --output text)
          echo "Current origin: $CURRENT_ORIGIN"

          # blue/green 판단
          if [[ $CURRENT_ORIGIN == *"blue"* ]]; then
            TARGET="green"
            CURRENT="blue"
            echo "🔵 Current: BLUE → 🎯 Target: GREEN"
          else
            TARGET="blue"
            CURRENT="green" 
            echo "🟢 Current: GREEN → 🎯 Target: BLUE"
          fi

          echo "target_color=$TARGET" >> $GITHUB_OUTPUT
          echo "target_bucket=hanghae-prod-$TARGET" >> $GITHUB_OUTPUT
          echo "current_color=$CURRENT" >> $GITHUB_OUTPUT
          echo "current_bucket=hanghae-prod-$CURRENT" >> $GITHUB_OUTPUT

      - name: Deploy to target S3 bucket
        run: |
          echo "📤 Deploying to: ${{ steps.target.outputs.target_bucket }}"

          # S3 파일 업로드만 (간단하게)
          aws s3 sync out/ s3://${{ steps.target.outputs.target_bucket }} --delete

          echo "✅ Deployment completed"

      - name: Switch CloudFront origin
        id: switch
        run: |
          echo "🔄 Switching to ${{ steps.target.outputs.target_color }}"

          # 현재 설정 가져오기 (롤백용 백업)
          aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} > dist.json
          ETAG=$(jq -r '.ETag' dist.json)

          # 롤백을 위해 현재 설정 저장
          echo "etag=$ETAG" >> $GITHUB_OUTPUT

          # Origin 변경
          NEW_DOMAIN="${{ steps.target.outputs.target_bucket }}.s3.amazonaws.com"
          jq --arg domain "$NEW_DOMAIN" '.Distribution.DistributionConfig.Origins.Items[0].DomainName = $domain' dist.json | jq '.Distribution.DistributionConfig' > new-config.json

          # 업데이트
          aws cloudfront update-distribution \
            --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
            --distribution-config file://new-config.json \
            --if-match $ETAG

          echo "✅ CloudFront origin switched to: $NEW_DOMAIN"

      - name: Wait for CloudFront deployment
        run: |
          echo "⏳ Waiting for CloudFront deployment..."

          # CloudFront 배포 완료까지 대기 (최대 10분)
          for i in {1..20}; do
            STATUS=$(aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --query 'Distribution.Status' --output text)
            echo "Deployment status ($i/20): $STATUS"
            
            if [[ "$STATUS" == "Deployed" ]]; then
              echo "✅ CloudFront deployment completed"
              break
            fi
            
            if [[ $i -eq 20 ]]; then
              echo "❌ CloudFront deployment timed out"
              exit 1
            fi
            
            sleep 30
          done

      - name: Invalidate CloudFront cache
        run: |
          echo "🔄 Invalidating CloudFront cache..."

          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "Invalidation ID: $INVALIDATION_ID"
          echo "✅ Cache invalidation initiated"

      - name: Lighthouse performance audit
        run: |
          echo "🔍 Running Lighthouse performance audit..."
          PROD_URL="https://prod.min71.dev"

          # 간단한 연결 테스트 먼저
          echo "Testing connection..."
          if ! curl -f --max-time 30 "$PROD_URL/" > /dev/null; then
            echo "⚠️ Site not accessible yet, skipping Lighthouse"
            exit 0
          fi

          # Lighthouse 실행
          lighthouse "$PROD_URL" \
            --output=json \
            --output-path=./lighthouse-report.json \
            --chrome-flags="--headless --no-sandbox --disable-dev-shm-usage" \
            --quiet \
            --max-wait-for-load=30000 || echo "Lighthouse failed, continuing..."

          # 성능 점수 확인 (파일이 있는 경우만)
          if [ -f "./lighthouse-report.json" ]; then
            PERFORMANCE_SCORE=$(jq -r '.categories.performance.score * 100' lighthouse-report.json 2>/dev/null || echo "0")
            echo "📊 Performance Score: $PERFORMANCE_SCORE"
            
            if (( $(echo "$PERFORMANCE_SCORE > 0" | bc -l) )); then
              echo "✅ Lighthouse audit completed"
            fi
          else
            echo "ℹ️ Lighthouse report not generated, skipping..."
          fi

      - name: Rollback on failure
        if: failure()
        run: |
          echo "🚨 Deployment failed! Initiating rollback..."

          if [[ -f "dist.json" ]] && [[ -n "${{ steps.switch.outputs.etag }}" ]]; then
            echo "🔄 Rolling back CloudFront to previous configuration..."
            
            # 원래 설정으로 롤백
            jq '.Distribution.DistributionConfig' dist.json > rollback-config.json
            
            # 새로운 ETag 가져오기
            CURRENT_ETAG=$(aws cloudfront get-distribution --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} --query 'ETag' --output text)
            
            aws cloudfront update-distribution \
              --id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
              --distribution-config file://rollback-config.json \
              --if-match $CURRENT_ETAG
            
            # 롤백 후 캐시 무효화
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.PRODUCTION_DISTRIBUTION_ID }} \
              --paths "/*"
            
            echo "✅ Rollback completed - reverted to ${{ steps.target.outputs.current_color }}"
            echo "⏳ Please wait 5-10 minutes for rollback to fully propagate"
          else
            echo "⚠️ Rollback configuration not available"
          fi

      - name: Deployment summary
        if: always()
        run: |
          echo "📊 DEPLOYMENT SUMMARY"
          echo "===================="

          if [[ "${{ job.status }}" == "success" ]]; then
            echo "🎉 Blue-Green deployment completed successfully!"
            echo "✅ Target: ${{ steps.target.outputs.target_color }}"
            echo "✅ Bucket: ${{ steps.target.outputs.target_bucket }}"
            echo "🌐 Live URL: https://prod.min71.dev"
          else
            echo "❌ Deployment failed!"
            echo "🔄 Rollback to ${{ steps.target.outputs.current_color }} initiated"
          fi

          echo "📅 Deployment Time: $(date)"
          echo "🏷️ Status: ${{ job.status }}"
